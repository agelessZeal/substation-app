/*
 * Public Substation API for the Smart Service Intelligent Autonomous Grid
 *
 * Public API for registered users to access the device data, production data on a device, bay or substation base.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: istvan.mudrak@smartservice.energy
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;
using System.Linq;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class MeasurementsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Datacom Products, CR0M3GP4U, Electrical Transceiver</param>
        /// <param name="fromDate">Start date of the historical production data</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="toDate">End date of the historical production data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of substations owned by a client</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/historical/all")]
        [ValidateModelState]
        [SwaggerOperation("GetMeasurementAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of substations owned by a client")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeasurementAll([FromRoute][Required]string measurementId, [FromQuery][Required()]DateTime? fromDate, [FromQuery]string clientId, [FromQuery]DateTime? toDate)
        {
            return Helper.Result(this, Data.HistoricalMeasurement(measurementId, null, fromDate, toDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Total list of different timeseries of a substation could produce for a client</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements")]
        [ValidateModelState]
        [SwaggerOperation("GetMeasurementTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MeasurementType>), description: "Total list of different timeseries of a substation could produce for a client")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeasurementTypes([FromQuery]string clientId)
        {
            return Helper.Result(this, Data.MeasurementTypes);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Id of the series reported by the getMeasurementTypes</param>
        /// <param name="bayId">Id of a given bay</param>
        /// <param name="fromDate">Start date of the historical production data</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="toDate">End date of the historical production data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of a given bay</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/historical/bay/{bayId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMeasurementsByBayId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of a given bay")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeasurementsByBayId([FromRoute][Required]string measurementId, [FromRoute][Required]string bayId, [FromQuery][Required()]DateTime? fromDate, [FromQuery]string clientId, [FromQuery]DateTime? toDate)
        {
            return Helper.Result(this, Data.HistoricalMeasurement(measurementId, bayId, fromDate, toDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Id of the series reported by the getMeasurementTypes</param>
        /// <param name="deviceId">Id of a given device</param>
        /// <param name="fromDate">Start date of the historical production data</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="toDate">End date of the historical production data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of a given device</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/historical/device/{deviceId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMeasurementsByDeviceId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of a given device")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeasurementsByDeviceId([FromRoute][Required]string measurementId, [FromRoute][Required]string deviceId, [FromQuery][Required()]DateTime? fromDate, [FromQuery]string clientId, [FromQuery]DateTime? toDate)
        {
            return Helper.Result(this, Data.HistoricalMeasurement(measurementId, deviceId, fromDate, toDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Id of the series reported by the getMeasurementTypes</param>
        /// <param name="substationId">Id of a given substation</param>
        /// <param name="fromDate">Start date of the historical production data</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="toDate">End date of the historical production data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of the substations owned by a client</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/historical/substation/{substationId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMeasurementsBySubstationId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of the substations owned by a client")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeasurementsBySubstationId([FromRoute][Required]string measurementId, [FromRoute][Required]string substationId, [FromQuery][Required()]DateTime? fromDate, [FromQuery]string clientId, [FromQuery]DateTime? toDate)
        {
            return Helper.Result(this, Data.HistoricalMeasurement(measurementId, substationId, fromDate, toDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="meteringId">Id of the series reported by the getMeteringTypes</param>
        /// <param name="numberOf">Count of the equidistant data points</param>
        /// <param name="timeSpan">Size of the equidistant time frame</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="startDate">Start date of the metering data</param>
        /// <param name="endDate">End date of the historical production data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of a given device</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/meterings/{meteringId}/all")]
        [ValidateModelState]
        [SwaggerOperation("GetMeteringAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of a given device")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeteringAll([FromRoute][Required]string meteringId, [FromQuery][Required()]string numberOf, [FromQuery][Required()]TimeSpan? timeSpan, [FromQuery]string clientId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        {
            return Helper.Result(this, Data.HistoricalMetering(meteringId, null, numberOf, timeSpan, startDate, endDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="meteringId">Id of the series reported by the getMeteringTypes</param>
        /// <param name="bayId">Id of a given bay</param>
        /// <param name="numberOf">Count of the equidistant data points</param>
        /// <param name="timeSpan">Size of the equidistant time frame</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="startDate">Start date of the metering data</param>
        /// <param name="endDate">End date of the metering data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of a given device</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/meterings/{meteringId}/bay/{bayId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMeteringByBayId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of a given device")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeteringByBayId([FromRoute][Required]string meteringId, [FromRoute][Required]string bayId, [FromQuery][Required()]string numberOf, [FromQuery][Required()]TimeSpan? timeSpan, [FromQuery]string clientId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        {
            return Helper.Result(this, Data.HistoricalMetering(meteringId, bayId, numberOf, timeSpan, startDate, endDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="meteringId">Id of the series reported by the getMeteringTypes</param>
        /// <param name="deviceId">Id of a given series</param>
        /// <param name="numberOf">Count of the equidistant data points</param>
        /// <param name="timeSpan">Size of the equidistant time frame</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="startDate">Start date of the historical production data</param>
        /// <param name="endDate">End date of the historical production data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of a given device</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/meterings/{meteringId}/device/{deviceId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMeteringByDeviceId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of a given device")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeteringByDeviceId([FromRoute][Required]string meteringId, [FromRoute][Required]string deviceId, [FromQuery][Required()]string numberOf, [FromQuery][Required()]TimeSpan? timeSpan, [FromQuery]string clientId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        {
            return Helper.Result(this, Data.HistoricalMetering(meteringId, deviceId, numberOf, timeSpan, startDate, endDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="meteringId">Id of the series reported by the getMeteringTypes</param>
        /// <param name="substationId">Id of a given series</param>
        /// <param name="numberOf">Count of the equidistant data points</param>
        /// <param name="timeSpan">Size of the equidistant time frame</param>
        /// <param name="clientId">Id of client</param>
        /// <param name="startDate">Start date of the metering data</param>
        /// <param name="endDate">End date of the historical production data, when not provided the end date is the current date</param>
        /// <response code="200">Total historical production of a given device</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/meterings/{meteringId}/substation/{substationId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMeteringBySubstationId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total historical production of a given device")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeteringBySubstationId([FromRoute][Required]string meteringId, [FromRoute][Required]string substationId, [FromQuery][Required()]string numberOf, [FromQuery][Required()]TimeSpan? timeSpan, [FromQuery]string clientId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        {
            return Helper.Result(this, Data.HistoricalMetering(meteringId, substationId, numberOf, timeSpan, startDate, endDate));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Total list of different meterings (aggregate or calculated measurements) of a substation could produce for a client</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/meterings")]
        [ValidateModelState]
        [SwaggerOperation("GetMeteringTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MeasurementType>), description: "Total list of different meterings (aggregate or calculated measurements) of a substation could produce for a client")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetMeteringTypes([FromQuery]string clientId)
        {
            return Helper.Result(this, Data.MeteringTypes);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Id of the series reported by the getMeasurementTypes</param>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Total actual production of substations owned by a client</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/actual/all")]
        [ValidateModelState]
        [SwaggerOperation("GetProductionAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total actual production of substations owned by a client")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetProductionAll([FromRoute][Required]string measurementId, [FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Actual(measurementId, null));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Id of the series reported by the getMeasurementTypes</param>
        /// <param name="bayId">Id of a given bay</param>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Total actual production of a given bay</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/actual/bay/{bayId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProductionByBayId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total actual production of a given bay")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetProductionByBayId([FromRoute][Required]string measurementId, [FromRoute][Required]string bayId, [FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Actual(measurementId, bayId));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Datacom Products, CR0M3GP4U, Electrical Transceiver</param>
        /// <param name="deviceId">Id of a given device</param>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Total actual production of a given device</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/actual/device/{deviceId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProductionByDeviceId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total actual production of a given device")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetProductionByDeviceId([FromRoute][Required]string measurementId, [FromRoute][Required]string deviceId, [FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Actual(measurementId, deviceId));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measurementId">Id of the series reported by the getMeasurementTypes</param>
        /// <param name="substationId">Id of the substation</param>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Total actual production of a substation owned by a client</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/measurements/{measurementId}/actual/substation/{substationId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProductionBySubstationId")]
        [SwaggerResponse(statusCode: 200, type: typeof(TimeSeries), description: "Total actual production of a substation owned by a client")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult GetProductionBySubstationId([FromRoute][Required]string measurementId, [FromRoute][Required]string substationId, [FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Actual(measurementId, substationId));
        }
    }
}

/*
 * Public Substation API for the Smart Service Intelligent Autonomous Grid
 *
 * Public API for registered users to access the device data, production data on a device, bay or substation base.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: istvan.mudrak@smartservice.energy
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;
using System.Linq;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class BayApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">List of all bays owned by a client</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/bays")]
        [ValidateModelState]
        [SwaggerOperation("FindBayAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Bay>), description: "List of all bays owned by a client")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult FindBayAll([FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Bays.Select(b => b.Mrid));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="bayId">Id of a given bay</param>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Bay data idetified by {bayId}</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/bays/{bayId}")]
        [ValidateModelState]
        [SwaggerOperation("FindBayByBayId")]
        [SwaggerResponse(statusCode: 200, type: typeof(Bay), description: "Bay data idetified by {bayId}")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult FindBayByBayId([FromRoute][Required]string bayId, [FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Bays.Where(b => b.Mrid == bayId).FirstOrDefault());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="substationId">Id of a given substation</param>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">All bay data idetified by {substationId}</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/substations/{substationId}/bays")]
        [ValidateModelState]
        [SwaggerOperation("FindBayBySubstationId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Bay>), description: "All bay data idetified by {substationId}")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult FindBayBySubstationId([FromRoute][Required]string substationId, [FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Bays.Where(b => b.Mrid.StartsWith(substationId)).Select(b => b.Mrid));
        }
    }
}

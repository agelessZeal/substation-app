/*
 * Public Substation API for the Smart Service Intelligent Autonomous Grid
 *
 * Public API for registered users to access the device data, production data on a device, bay or substation base.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: istvan.mudrak@smartservice.energy
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;
using System.Linq;

namespace Org.OpenAPITools.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class SubstationApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">List of all substations owned by a client. ClientId is proided after authorization. All the below GET requests are working on the same philosophy.</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/substations")]
        [ValidateModelState]
        [SwaggerOperation("FindSubstationAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Substation>), description: "List of all substations owned by a client. ClientId is proided after authorization. All the below GET requests are working on the same philosophy.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult FindSubstationAll([FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Substations.Select(s => s.Mrid));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="substationId">Id of a given substation</param>
        /// <param name="clientId">Id of client</param>
        /// <response code="200">Substation data idetified by {substationId}</response>
        /// <response code="0">Invalid status</response>
        [HttpGet]
        [Route("/substation/v1/substations/{substationId}")]
        [ValidateModelState]
        [SwaggerOperation("FindSubstationBySubstationId")]
        [SwaggerResponse(statusCode: 200, type: typeof(Substation), description: "Substation data idetified by {substationId}")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Invalid status")]
        public virtual IActionResult FindSubstationBySubstationId([FromRoute][Required]string substationId, [FromQuery]string clientId)
        {
            return Helper.Result(this, Data.Substations.Where(s => s.Mrid == substationId).FirstOrDefault());
        }
    }
}

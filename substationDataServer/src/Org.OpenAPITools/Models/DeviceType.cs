/*
 * Public Substation API for the Smart Service Intelligent Autonomous Grid
 *
 * Public API for registered users to access the device data, production data on a device, bay or substation base.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: istvan.mudrak@smartservice.energy
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Based on the IEC61850 DPL Common Data Class
    /// </summary>
    [DataContract]
    public partial class DeviceType : IEquatable<DeviceType>
    { 
        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="vendor")]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or Sets HwRev
        /// </summary>
        [DataMember(Name="hwRev")]
        public string HwRev { get; set; }

        /// <summary>
        /// Gets or Sets SwRev
        /// </summary>
        [DataMember(Name="swRev")]
        public string SwRev { get; set; }

        /// <summary>
        /// Gets or Sets SerNum
        /// </summary>
        [DataMember(Name="serNum")]
        public string SerNum { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets PrimeOps
        /// </summary>
        [DataMember(Name="primeOps")]
        public string PrimeOps { get; set; }

        /// <summary>
        /// Gets or Sets SecondOps
        /// </summary>
        [DataMember(Name="secondOps")]
        public string SecondOps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceType {\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  HwRev: ").Append(HwRev).Append("\n");
            sb.Append("  SwRev: ").Append(SwRev).Append("\n");
            sb.Append("  SerNum: ").Append(SerNum).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PrimeOps: ").Append(PrimeOps).Append("\n");
            sb.Append("  SecondOps: ").Append(SecondOps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeviceType)obj);
        }

        /// <summary>
        /// Returns true if DeviceType instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceType other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Vendor == other.Vendor ||
                    Vendor != null &&
                    Vendor.Equals(other.Vendor)
                ) && 
                (
                    HwRev == other.HwRev ||
                    HwRev != null &&
                    HwRev.Equals(other.HwRev)
                ) && 
                (
                    SwRev == other.SwRev ||
                    SwRev != null &&
                    SwRev.Equals(other.SwRev)
                ) && 
                (
                    SerNum == other.SerNum ||
                    SerNum != null &&
                    SerNum.Equals(other.SerNum)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    PrimeOps == other.PrimeOps ||
                    PrimeOps != null &&
                    PrimeOps.Equals(other.PrimeOps)
                ) && 
                (
                    SecondOps == other.SecondOps ||
                    SecondOps != null &&
                    SecondOps.Equals(other.SecondOps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Vendor != null)
                    hashCode = hashCode * 59 + Vendor.GetHashCode();
                    if (HwRev != null)
                    hashCode = hashCode * 59 + HwRev.GetHashCode();
                    if (SwRev != null)
                    hashCode = hashCode * 59 + SwRev.GetHashCode();
                    if (SerNum != null)
                    hashCode = hashCode * 59 + SerNum.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (PrimeOps != null)
                    hashCode = hashCode * 59 + PrimeOps.GetHashCode();
                    if (SecondOps != null)
                    hashCode = hashCode * 59 + SecondOps.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeviceType left, DeviceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeviceType left, DeviceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
